/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: contact.proto
 *
 */

import Foundation
import SwiftProtobuf


public struct Contact: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Contact"}
  public var protoMessageName: String {return "Contact"}
  public var protoPackageName: String {return ""}
  public var jsonFieldNames: [String: Int] {return [
    "firstName": 1,
    "lastName": 2,
    "twitterName": 3,
    "email": 4,
    "githubLink": 5,
    "type": 6,
    "imageName": 7,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "first_name": 1,
    "last_name": 2,
    "twitter_name": 3,
    "email": 4,
    "github_link": 5,
    "type": 6,
    "imageName": 7,
  ]}

  public enum ContactType: ProtobufEnum {
    public typealias RawValue = Int
    case speaker // = 0
    case attendant // = 1
    case volunteer // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .speaker
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .speaker
      case 1: self = .attendant
      case 2: self = .volunteer
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "speaker": self = .speaker
      case "attendant": self = .attendant
      case "volunteer": self = .volunteer
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "SPEAKER": self = .speaker
      case "ATTENDANT": self = .attendant
      case "VOLUNTEER": self = .volunteer
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "SPEAKER": self = .speaker
      case "ATTENDANT": self = .attendant
      case "VOLUNTEER": self = .volunteer
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .speaker: return 0
        case .attendant: return 1
        case .volunteer: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .speaker: return "\"SPEAKER\""
        case .attendant: return "\"ATTENDANT\""
        case .volunteer: return "\"VOLUNTEER\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .speaker: return ".speaker"
        case .attendant: return ".attendant"
        case .volunteer: return ".volunteer"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public var firstName: String = ""

  public var lastName: String = ""

  public var twitterName: String = ""

  public var email: String = ""

  public var githubLink: String = ""

  public var type: Contact.ContactType = Contact.ContactType.speaker

  public var imageName: String = ""

  public init() {}

  public init(firstName: String? = nil,
    lastName: String? = nil,
    twitterName: String? = nil,
    email: String? = nil,
    githubLink: String? = nil,
    type: Contact.ContactType? = nil,
    imageName: String? = nil)
  {
    if let v = firstName {
      self.firstName = v
    }
    if let v = lastName {
      self.lastName = v
    }
    if let v = twitterName {
      self.twitterName = v
    }
    if let v = email {
      self.email = v
    }
    if let v = githubLink {
      self.githubLink = v
    }
    if let v = type {
      self.type = v
    }
    if let v = imageName {
      self.imageName = v
    }
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &firstName)
    case 2: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &lastName)
    case 3: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &twitterName)
    case 4: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &email)
    case 5: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &githubLink)
    case 6: handled = try setter.decodeSingularField(fieldType: Contact.ContactType.self, value: &type)
    case 7: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &imageName)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if firstName != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: firstName, protoFieldNumber: 1, protoFieldName: "first_name", jsonFieldName: "firstName", swiftFieldName: "firstName")
    }
    if lastName != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: lastName, protoFieldNumber: 2, protoFieldName: "last_name", jsonFieldName: "lastName", swiftFieldName: "lastName")
    }
    if twitterName != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: twitterName, protoFieldNumber: 3, protoFieldName: "twitter_name", jsonFieldName: "twitterName", swiftFieldName: "twitterName")
    }
    if email != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: email, protoFieldNumber: 4, protoFieldName: "email", jsonFieldName: "email", swiftFieldName: "email")
    }
    if githubLink != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: githubLink, protoFieldNumber: 5, protoFieldName: "github_link", jsonFieldName: "githubLink", swiftFieldName: "githubLink")
    }
    if type != Contact.ContactType.speaker {
      try visitor.visitSingularField(fieldType: Contact.ContactType.self, value: type, protoFieldNumber: 6, protoFieldName: "type", jsonFieldName: "type", swiftFieldName: "type")
    }
    if imageName != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: imageName, protoFieldNumber: 7, protoFieldName: "imageName", jsonFieldName: "imageName", swiftFieldName: "imageName")
    }
  }

  public func _protoc_generated_isEqualTo(other: Contact) -> Bool {
    if firstName != other.firstName {return false}
    if lastName != other.lastName {return false}
    if twitterName != other.twitterName {return false}
    if email != other.email {return false}
    if githubLink != other.githubLink {return false}
    if type != other.type {return false}
    if imageName != other.imageName {return false}
    return true
  }
}

public struct Speakers: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Speakers"}
  public var protoMessageName: String {return "Speakers"}
  public var protoPackageName: String {return ""}
  public var jsonFieldNames: [String: Int] {return [
    "contacts": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "contacts": 1,
  ]}

  public var contacts: [Contact] = []

  public init() {}

  public init(contacts: [Contact] = [])
  {
    if !contacts.isEmpty {
      self.contacts = contacts
    }
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRepeatedMessageField(fieldType: Contact.self, value: &contacts)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !contacts.isEmpty {
      try visitor.visitRepeatedMessageField(value: contacts, protoFieldNumber: 1, protoFieldName: "contacts", jsonFieldName: "contacts", swiftFieldName: "contacts")
    }
  }

  public func _protoc_generated_isEqualTo(other: Speakers) -> Bool {
    if contacts != other.contacts {return false}
    return true
  }
}
